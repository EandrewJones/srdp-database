############################################################
##                                                        ##
## Strategies of Resistance Data Project Environment File ##
##                                                        ##
############################################################

# The database is fully containerized and all hyper-parameters
# for the container are read in from this file. I have provided
# sensible defaults where possible but these should be tweaked
# as needed.

# Upon updating these variables, the container must be rebuilt to
# read in the new values.

#
#   HASHING
#
# The secret key is used for encrypting passwords and anything
# else requuring encrytion in the app. It can be set to anything
# but the longer and more complex the better.
#
# On linux systems, the following shell command works well for
# generating random hashes:
#
# tr -dc 'A-Za-z0-9!"#$%&()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo
#
SECRET_KEY=


#
#   MYSQL SERVER
#
# Config variables for the MySQL container

# The name of the database that will be created upon launch
MYSQL_DATABASE=SRDP

# MySQL user credentials
# In rare instances you need to tunnel into the container
# and manually debug the database, you should use the following
# user name and password
MYSQL_USER=SRDP
MYSQL_PASSWORD=

# The root user's password. Make this long and complex. I recommend using the
# random hash command provided above.
MYSQL_ROOT_PASSWORD=

# The database connection URI.
# If you want to run flask for development purposes on a local machine,
# comment this out and it will spin up an sqlite3 db by default.
# To integrate new database changes, you must comment this out, run
# flask db migrate on the local machine, push the changes to github,
# pull the changes on the production machine and relaunch the conatiner with
# the new changes
DATABASE_URL='mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db/${MYSQL_DATABASE}?charset=utf8mb4&use_unicode=1'

#
#   MAIL SERVER
#
# The application is set up to send email notifications with logs
# to admins upon encountering errors. It it easily extensible to other
# use cases as well, such as emailing reset password instructions to users
# if/once a front-end is added.
#
# By default, the server uses gmail's SMTP service as is linked to an account
# that I (Evan) created for these purposes. If you want to use a different
# base email account. Any gmail will suffice; however, you must tweak the account
# settings to let third-party apps access it. See the "Hacking Gmail Security" in
# the following instructions:
#
# https://www.twilio.com/blog/2018/03/send-email-programmatically-with-gmail-python-and-flask.html

# Specify which server to use
MAIL_SERVER=smtp.googlemail.com

# The mail port
# Set to 587 by default as this is the default mail submission port set by
# IETF guidelines. Port 587, coupled with TLS encryption, ensures that email
# is submitted securely and following the guidelines set out by the IETF.
#
# Other options include port 25 and 465. Only change if you have a good reason.
MAIL_PORT=587

# Use TLS encryption. Default is True. I strongly encourage NOT to change this
MAIL_USE_TLS=True

# Email account credentials
# Please change these to your own username and password if you create a new,
# dedicated account.
MAIL_USERNAME=
MAIL_PASSWORD=

#
#   FLASK APP
#
# Default admin user is defined below.
# The default admin is created upon first launch (in progress) and
# future admin status is conferred by checking against the ADMIN_EMAILS
# variable below.

# The number of worker for your API, decrease this number if you're tight
# on memory or CPU. The more workers the faster your queries are answered
# (so if you have a lot of users it's better). Each worker takes up between
# 100 and 200MB. The default is 8 and should be sufficient for a large team
# of users
# N_WORKERS=8

# Default admin account name
ADMIN_USERNAME=

# Default passowrd. May be changed, but recommended to use a random hash.
ADMIN_PASSWORD=

# Provide emails as a json array, e.g. '["example@gmail.com"]'.
# When a new user is created, they will automatically be conferred
# admin satus if the provided email is in this list.
ADMIN_EMAILS=
